#########################################################################
# (‑●‑●)> dual licensed under the WTFPL v2 license and the MIT license, #
#         without any warranty.                                         #
#         Maintained by dalu <mou.tong@qq.com> since 2020-06-03         #
#########################################################################


###########
# GENERAL #
###########

# Change the prefix key to C-a
# GNU-Screen compatible prefix
set-option -g prefix C-a
unbind C-b
bind C-a send-prefix

# Enable xterm-style function key sequences.
set-option -gw xterm-keys on

# start with mouse mode enabled
set-option -g mouse on

# Faster command sequences
set-option -s escape-time 10

# Slower repeat timeout
set-option -gs repeat-time 600

# Enable focus event.
set-option -s focus-events on

# Boost history
set-option -g history-limit 5000

# Use utf-8
set-option -gqw utf8 on

# Start windows and panes numbering at 1
set-option -g base-index 1
set-option -gw pane-base-index 1

# Rename window to reflect current program
set-option -gw automatic-rename on

# Renumber windows when a window is closed
set-option -g renumber-windows on

###########
# DISPLAY #
###########

# Colors!

# How to use true colors in vim under tmux? #1246 for 2.6 and higher
# https://github.com/tmux/tmux/issues/1246:
# set -g default-terminal "tmux-256color"
# set -ga terminal-overrides ",*256col*:Tc"
# 2.5 and lower:
# set -g default-terminal "screen-256color"

# Doesn't work on iterm2 / mac
# if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 6 \)'" 'set -g default-terminal "tmux-256color"'
# if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 6 \)'" 'set -ga terminal-overrides ",*256col*:Tc"'

# # Try screen256-color (https://github.com/tmux/tmux/issues/622):
# if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 6 \)'" 'set -g default-terminal "screen-256color"'
# if-shell "test '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -ge 6 \)'" 'set -ga terminal-overrides ",screen-256color:Tc"'

# if-shell '\( #{$TMUX_VERSION_MAJOR} -eq 2 -a #{$TMUX_VERSION_MINOR} -lt 6\) -o #{$TMUX_VERSION_MAJOR} -le 1' 'set -g default-terminal "screen-256color"'

# Uncomment the below line you can delete &t_8f &t_8b in vim config
# set-option -g default-terminal "xterm-24bits"
# set-option -g default-terminal "xterm-256color"
set-option -g default-terminal "screen-256color"

# Override terminal TERM
# set-option-option -ga terminal-overrides ',*-24bits*:RGB'

# Enable Neovim cursor shapes in tmux.
# https://github.com/neovim/neovim/wiki/FAQ#cursor-shape-doesnt-change-in-tmux
set-option -as terminal-overrides '*:Ss=\E[%p1%d q:Se=\E[2 q'

# Set terminal title
set-option -g set-titles on

# activity
set-option -g monitor-activity on
set-option -g visual-activity off

# Status bar style
# redraw status line per minute
set-option -g status-interval 60 # unit, seconds
set-option -g status-style bg=black
set-option -g status-left '#[fg=default,bg=magenta] #S '
set-option -g status-right '#{?client_prefix,#[reverse] ^A #[noreverse],} #[fg=white,bg=black]%a %R %p %Y-%m-%d #{USER}'

# Set window status style.
set-option -g window-status-separator ''

# Default window style
set-option -g window-status-format ' #I:#W#F '
set-option -g window-status-style bg=black,fg=white

# Active window style
set-option -g window-status-current-format ' #I:#W#F '
set-option -g window-status-current-style bg=yellow,fg=black

# Set pane border style.
set-option -g pane-border-style bg=default,fg=colour240
set-option -g pane-active-border-style bg=default,fg=green

# clock
set-option -gw clock-mode-colour green

################
# Key Bindings #
################

# Global:
#   prefix r        Reload tmux configuration file.
#   prefix t        Show the time.
#   prefix ?        List all key bindings.
#   prefix :        Enter the tmux command prompt.
#   ctrl+l          Clear both screen and history.

# Reload configuration
bind r source-file ~/.tmux.conf \; display-message 'tmux configuration reloaded.'

# clear both screen and history
bind -n C-l send-keys C-l \; run 'sleep 0.1' \; clear-history

# Session:
#   prefix ctrl+c   Create a new session.
#   prefix s        Choose the current session interactively.
#   prefix $        Rename the current session.
#   prefix d        Detach the current client.
#   prefix )        Change to the next session.
#   prefix (        Change to the previous session.

# create session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# Window:
#   prefix c        Create a new window.
#   prefix w        Choose the current window interactively.
#   prefix n        Change to the next window.
#   prefix p        Change to the previous window.
#   prefix f        Find opened windows.
#   prefix ,        Rename the current window.
#   prefix &        Kill the current window.

# split current window vertically
bind - split-window -v
# split current window horizontally
bind | split-window -h

# Pane:
#   prefix |        Split the current pane into two, left and right.
#   prefix -        Split the current pane into two, top and bottom.
#   prefix o        Select the next pane in the current window.
#   prefix q        Briefly display pane indexes.
#   prefix x        Kill the current pane.
#   prefix space    Arrange the current window in the next preset layout.
#   prefix <        Swap the current pane with the previous pane.
#   prefix >        Swap the current pane with the next pane.
#   prefix z        Toggle zoom state of the current pane.

# pane navigation
bind -r h select-pane -L        # move left
bind -r j select-pane -D        # move down
bind -r k select-pane -U        # move up
bind -r l select-pane -R        # move right
bind > swap-pane -D             # swap current pane with the next one
bind < swap-pane -U             # swap current pane with the previous one

# Session is considered to be remote when we ssh into host
if-shell 'test -n "$SSH_CLIENT"' \
    'source-file ~/.tmux/tmux.remote.conf'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind p
bind -r C-h previous-window     # select previous window
bind -r C-l next-window         # select next window
bind Tab last-window            # move to last active window

# switch current window
bind -r M-a swap-window -d -s . -t ^
bind -r M-e swap-window -d -s . -t $
bind -r M-h swap-window -d -s . -t -
bind -r M-l swap-window -d -s . -t +

# Edit configuration
bind e new-window -n "~/.tmux.conf" "sh -c '\${EDITOR:-vim} ~/.tmux.conf && tmux source ~/.tmux.conf && tmux display \"~/.tmux.conf sourced\"'"

# -- copy mode ---------------------------------------------

# Copy Mode:
#   prefix [        Enter copy mode to copy text or view the history.
#   prefix ]        Paste the most recently copied buffer of text.
#   space           Start selection.
#   esc             Clear selection.
#   enter           Copy selection.
#   q               Quit copy mode.

# Enable Vi mode
set-option -g mode-keys vi

bind Enter copy-mode # enter copy mode

run -b 'tmux bind -t vi-copy v begin-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi v send -X begin-selection 2> /dev/null || true'
run -b 'tmux bind -t vi-copy C-v rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi C-v send -X rectangle-toggle 2> /dev/null || true'
run -b 'tmux bind -t vi-copy y copy-selection 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi y send -X copy-selection-and-cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy Escape cancel 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi Escape send -X cancel 2> /dev/null || true'
run -b 'tmux bind -t vi-copy H start-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi H send -X start-of-line 2> /dev/null || true'
run -b 'tmux bind -t vi-copy L end-of-line 2> /dev/null || true'
run -b 'tmux bind -T copy-mode-vi L send -X end-of-line 2> /dev/null || true'

# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'


# -- buffers -----------------------------------------------

bind b list-buffers  # list paste buffers
bind p paste-buffer  # paste from the top paste buffer
bind P choose-buffer # choose which buffer to paste from

##########
# PLUGIN #
##########
